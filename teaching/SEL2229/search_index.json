[["index.html", "Experimental Methods in Linguistics Week 1 New Tools 1.1 Aims 1.2 Introduction 1.3 Perusall 1.4 Posit Nutshells", " Experimental Methods in Linguistics Christine Cuskley 2025-05-01 Week 1 New Tools 1.1 Aims Set up accounts with new tools, become familiar with Posit, understand how to complete weekly reflections in Posit for your first assignment. 1.2 Introduction Before we get started, let’s understand a bit about how these labs will work. Each week in lab is a chapter in this “book” that goes through some specific sequence of tasks, which are related to reflection questions - these are available in an assignment template that you make your own personal copy of (more on this soon). Because you will be working through this independently at your own pace, there is a fair bit of text to guide you; where you see a colon before a :word or phrase, you can click on it to unpack some extra information or context. The entire guide is written in R and RMarkdown using bookdown (this will mean something to you shortly): you can navigate through the whole thing using the table of contents on the left, and use the menu at the top to show/hide the table of contents, search all the text, or change how it looks while you’re reading. I’ve also provided a checklist of all the tasks that you can use to actually tick things off (this is also available as a word document on Canvas). While you’re working your way through the tasks, you might get stuck - this is part of the learning process. The instructions I provide here are explicit, but will be increasingly general as you gain independence: they are meant to :guide you through figuring things out for yourself. From time to time, we may :deliberately put bugs into our lab tasks to help you develop this skill. The good news is that when you do get stuck, we’re here to help - just raise your hand or call me over and someone can help you figure it out. You can really ask us anything. You might also want to chat to your peers nearby - if you’ve had a problem, someone else has probably encountered it, too - they may have already found a solution they can share. Overall, especially when it comes to code, what’s important is that it works and you can explain how it works - but not every problem has a single solution! If you run into something you want to ask about after lab - since you may need to dedicate time to finishing a week’s task outside of the timetabled hour - use the dedicated Discussion board to raise a question on Canvas. I’ll hop in as soon as I can to help. You can use the table of contents on the left to jump to particular tasks for the week as needed - but note that the walkthrough is meant to be…walked through. You should read it all and work through it sequentially. To keep overall track of your progress in each week coming up to the assignment deadline, use the full checklist document. You will want to either print this or keep a saved copy of it (e.g., in your OneDrive) where you cross of finished tasks. Although the tasks aren’t numbered, they’re designed to be done in the order they’re listed/presented here. In many cases, a single task will involve multiple steps - towards the start of module, I’ll make these explicit while you’re still learning. However, in later exercises (particularly from week 4 onwards), the idea is that you will know the steps to take to get from point A to point B without me having to list every single thing. 1.3 Perusall 1.3.1 Context Perusall is a tool for collaborative reading. If you’re like most students, you :do your reading on your own. Perusall allows you to get more out of the reading by interacting with others over the text, much in the way you might comment on a post or article elsewhere on the internet. “Others” here means other students on the module, but also me as the module leader - each reading will be released with my annotations, which should help you to understand exactly what I expect you to get out of the reading, often with explicit ties to other parts of the module (lectures, labs, and assignments). If you comment on a reading (even if this is anonymous), I’ll try to answer. This may come as a shock, but there is a point to this beyond it being cute and fun: getting in the habit of engaging in the reading this way means you are more likely to actually keep up with doing it (which, of course, you were planning to do anyway, right?), and as a consequence, you are more likely to do well in the module. 1.3.2 Tasks Sign up: Go to the Perusall website and create an account using your :university email. Join module: Perusall is a service that anyone can use, and there are loads of modules on it (referred to as “courses” to cater to the US market). Figure out how to use the join code CUSKLEY-B2XB3 to access readings for SEL2229. Now explore around a bit. Find the reading for week 1 and explore it a bit; it’s already annotated. Try out some features: Create or reply to a comment Search the reading for all instances of the word ‘variable’ Figure out how to upvote existing comment/annotation Explore the hashtags for the module Get Perusall to read aloud to you You’ll need one of the phrases I’ve annotated for your reflections shortly, so keep the tab open. 1.4 Posit 1.4.1 Context Posit is an interactive development environment, also known as an IDE. In other words, it’s a piece of software that you can write (i.e., develop) :programs or code in (in this case, in the programming language known as R). It’s important to note that Posit used to be called RStudio, and the in-browser version used to be called called RStudio Cloud. You’ll need to know this for troubleshooting; this is just a fancy word for figuring things out if you have a problem. Like any other software, you might Google what you want to know with the name of the software (e.g. “how do I make a table in Word”). Because they’ve renamed RStudio to Posit just in the last couple years, searching something like “how do I create a new script in Posit” may not get you the solutions you need, so be prepared to search “how do I create a new script in RStudio” instead. Note that Google is slightly ruined by default - the default is now that you need to scroll past AI-generated garbage results telling you to eat glass to get to answers that will actually be useful to you. You can add “-ai” to any search to suppress this, e.g., search “how do I create a new script in RStudio -ai”. You will need to do this - troubleshoot problems using Google - as you’re learning R with Posit at some point. In fact, you will probably watch me do this to help find answers to problems during labs. This is not just a performance for teaching purposes: I use R/Posit all the time, and have for a decade, and I am constantly searching for solutions, often using Google. Your aim today is just to get signed up to Posit, look around a bit, and set up the project that you’ll eventually submit for your first assignment. You’re not expected to understand much of what you see immediately; don’t let it scare you, just poke around. Next week we’ll start on our journey of actually understanding how to use it; by having a look now, you’ll make that start a little bit easier on yourself. 1.4.2 Tasks Sign up: Go to the Posit website and create an account. Once you’re logged in, you want to go to Posit Cloud. Once you’ve done this, it will stick you somewhere called “Your Workspace”. Throughout the module, you’ll do your seminar work in an R Project. Think of an R Project like a bundle of files related to your work that are all in the same place so they can talk to each other. You’ll submit this bundle for your first assignment. We’ll work on a range of exercises, some adapted from Bodo Winter’s Statistics for Linguists: An Introduction Using R, which will also be the target reading for the first few weeks. Eventually we’ll get into more complex things, and you may need to port files from that into your R Project. But first, let’s get it going. Access the template using this link. You will use this as a template for your first assignment, working in it over the next 7-8 weeks. Quickly look around and see what you can make sense of. Where can you type? Where can you click? What are the options in the different menus? At the top of the assignment template, there’s a red warning that says ‘Temporary Copy’. If you think about it even very briefly, you probably do not want the project you’re using to prepare your first assignment to be temporary. Temporary means it will blink out of existence as soon as you close the browser window. Figure out how to make this a permanent copy. Why might it be that any project shared in this way defaults to a temporary copy? :hint Once you’ve gotten your assignment template saved as a project within your own account, think about what you’re looking at. There are four panes in Posit, and each has several tabs. For now, we’ll only focus on the default tabs. The top left pane displays files (which you can edit) or variables/data (which you can only look at). The bottom left pane displays the console. This is where you interact directly with R, or where lines of code are sent to execute or run. The top right pane displays the environment. This shows what variables and objects are loaded into your R session. The bottom right pane shows files - this is where your reflections file is (assignment_reflections.Rmd), and where you’ll put anything else you work on in Posit throughout the semester. Start by going to the files pane and opening the file assignment_reflections.rmd. The next thing you’re going to do is switch into Posit and work your way through this file, which has specific questions for you to answer (some of which you’ll be able to do right away). But before we do that, let me explain a little bit about this .Rmd file, and files in general: The file extension here is .Rmd, which you probably haven’t seen before. Extensions you have probably seen are things like .docx (Word), .xlsx (Excel) and .txt (plain text). Note that because file extensions start with a “.”, filenames can’t include one (for any kind of file). .Rmd stands for R Markdown. You can read more about markdown in general here, but the gist is it’s just a way of creating text that can have formatting (e.g., bold, italics) much like Word. Ok great. So why can’t you just do this in Word, which you’ve almost certainly used before? A few reasons: Part of the point of this module is to learn to use R/Posit, not Word. It may come as a shock, but learning new things is good and you should try to do it on occasion. RMarkdown can do things Word can’t, like embed code. Look at the first week of the assignment reflections file and you’ll see a code chunk (the file itself explains a bit more). I’m using the assignment as a way to make you learn to use this, but it isn’t just for this assignment. Because RMarkdown lets you do much more complicated things than Word, it’s very useful for managing large documents (like, for example, a dissertation). It used to be that using RMarkdown involved really learning markdown itself. This isn’t really hard, it’s just different: for example, instead of selecting a paragraph and then selecting Header 1 from a menu, you just put a single hashtag in front of the paragraph (and two hashtags is Header 2, etc., with other special characters for any other kind of text formatting you can imagine). Learning RMarkdown in this way is still useful: if you type fast, it makes everything much faster because you’re not fiddling with point and click mouse stuff to format text. However, Posit now has a “visual” mode for RMarkdown that just makes it into a simplified little word processor that should be very easy to use. If you want, you can still use normal markdown syntax in this editor, but there is also a familiar menu bar at the top for any formatting needs. The default for an RMarkdown file in Posit is “Source” mode, which shows the hashtags etc. that it would typeset into e.g., headers. On the menu within the file’s tab, click “Visual” to see this word processor style instead. It may prompt you to install some R packages required to make this work (e.g., Pandoc) - go ahead and accept this suggestion (we’ll get to it later, but think of a package like an add-on). Now you’re ready to get on with your reflections for this week. The document itself has more information about what these should look like - pay close attention to this. I strongly suggest you complete these reflections now when things are fresh in your mind, and you can rest easy knowing you’ve already started your first assignment! This recommendation holds for every week: you should do your reflections during or immediately after completing the lab task. Trust me when I say that you cannot do this all at once right before the deadline; all the extensions in the world would not make this more feasible either. The lab work and reflections are designed to be done as you go throughout the module, and is not amenable to cramming. Nutshells 1.4.3 Bonus Tasks This means that they are a bonus for you in a general sense, but they are not part of the assignment at all, i.e., will not get you bonus “marks” of any kind. 1.4.4 Explain Clicking on these unpacks a bit of extra text if you want information. This may deepen your understanding or give you an extra hint, but I don’t expect that everyone will click on every info point. 1.4.5 Guide This is not because I am unable to give you very explicit instructions; it’s because getting used to finding your own solutions is a key skill for experimental design and analysis. The tasks are not something you can plod through without paying much attention to what you’re doing, and you won’t learn how to do much if I instruct you like I would a computer (we’ll learn more about this in week 2). 1.4.6 Deliberate Bugs There may also be bugs or other issues with the task because I’m not perfect; don’t worry, we’ll find a way to learn from those, too. 1.4.7 Do The Reading Note that I assume you do, in fact, do the reading, both for the purposes of this exercise and when it comes to marking your work. I wouldn’t assign it if it weren’t a key part of doing well in the module - but also note this isn’t the only reading you’re expected to do. You should also be finding and reading literature on your own to support you in your second assignment. We’ll refer to primary literature in the lectures all the time; look out for it. 1.4.8 University Email Why your university email? Because I might answer your question(s) on Perusall, it’s easier if I can follow up on who you are if we want to continue a discussion via email. It can be difficult to tell who someone like mk2003@gmail.com is. You can still choose to post anonymously on Perusall and I won’t be able to tell who you are. 1.4.9 Programs or Code If you’re already sitting there like, what does ‘program’ even mean exactly…? Code?? Don’t worry, that’s a perfectly reasonable thought, and we’ll get into this next week. 1.4.10 Temporary Copy Some services where you share a link to editable content, like Google Docs, just allow anyone to edit it (if you’ve calibrated the link in this way). However, imagine for a second the chaos that would cause here: I have shared the same link to a template to everyone in the class…and also asked everyone to edit it and eventually submit it for their assignment. If this link didn’t lead to a copy (thereby forcing you to save your own personal copy), it would be a mess. While you can type into many different files in an R project (As we’ll see throughout the semester), it is different in important ways to a Google doc. As such, it’s impossible to share a real-time editing link of this kind for a Posit Cloud project. If you want to collaborate in real-time with someone on an RProject, you add them as an editor instead. 1.4.11 Critical Thinking If you don’t use reference management software, you might not realise it, but you are haemmorhaging valuable cognitive resources doing tasks that are better left to your computer: keeping a library organised with your own idiosyncratic system and straining your eyes moving punctuation around just before an assignment deadline is taxing your executive function. You might know people who don’t use this kind of software and do fine, but this is likely because they’ve spent years (or decades) building up their own systems and strategies for managing literature and referencing. You could spend a lot of time doing this if you really want…or you could just use software that’s been developed for it. "],["introducing-r.html", "Week 2 Introducing R 2.1 Getting started with R 2.2 Exploring the interface 2.3 Dealing with external data 2.4 Try Swirl Nutshells", " Week 2 Introducing R Aims: Become familiar with Posit and basic ways of working with R. 2.1 Getting started with R This week’s lecture and reading have given you a more detailed introduction to R and statistics, and using R within RStudio/Posit. In today’s lab, we’ll start with :some exercises to explore Posit, in addition to adapted versions of some of the exercises at the end of Winter (2020), Chapter 1. As you should be aware, I do expect you actually do the reading, and you should be doing it ideally ahead of lectures and labs, or at least looking at it before this point. I may refer to specific parts of the reading in lab, and you may want to have the reading open in another window or tab to help you as you go. For the most part, R will tell you when things aren’t working out by throwing an error; this will be some information (usually in red) printed within the console. If you’re stuck, just flag me down or look for hints. Also remember that there is an easy to use search function within Perusall; you can use this to find exactly where in the reading Winter talks about a particular task or concept. Before you begin, here are few hot tips to remember: As we learned last week, within a script or RMarkdown file, writing code and running it are two separate things. If you enter code directly into the console it runs immediately. Code is case sensitive - that means that x and X are two different variables. There is a difference between a variable name, e.g., my_variable, and a string, which occurs inside quotes e.g., “my variable”. Strings can have spaces in them, but variable names cannot. This is why you will often see underscores (as in my_variable), or camelCase, e.g., myVariable. Note that because R is case sensitive, if you define something as myVariable and then type myvariable, it will throw an error. The vast majority of errors are caused by typos, especially when you’re starting out, so check that carefully first. R doesn’t spell check - it assumes you mean what you type (think about why this might be in reference to the prior point - a spell checker would try to correct myvariable to my variable). Note that this also means your reflections document doesn’t really have spell or grammar check! It will underline misspelled things in red for you (so you can scan the document and correct typos yourself), but Posit will not automatically correct your spelling or grammar. Certain words “reserved” in R - this means that you can’t use them for variable names because R already uses them for something else. For example, we’ll use the summary() function below - the fact that this already exists means it’s a bad idea for you to create your own thing called “summary”. The same goes for many characters, e.g., you can’t call a variable x+y because R will try to interpret this as trying to add the variables x and y together. There are some useful keyboard shortcuts you can use, especially when you’re working in the console: Pressing the up arrow will “scroll” through what you’ve typed before, so if you need to re-execute a bit of code you typed earlier (e.g., because the value of a variable has changed), just arrow up to find it and press enter. If you start typing in the console, R will pop up a list of what it thinks you might be looking for, and you can use tab to select from the top of that list (and arrow down etc). 2.2 Exploring the interface We’ll start this week where we left off with Posit last week: having a look around and getting to know things better. As you’ll have seen in my notes on Perusall for this week’s reading, there are a few differences between what Winter (2020) discusses and what we have to worry about because we’re using a cloud setup. Open the project you saved from last week, your personal copy of the assessment template. It will take a minute to “wake up” - why might this be? :answer Explore the view: Try hiding panes you can see and showing ones you can’t; you can also change their sizes, or the tabs you’re viewing within a pane. Why might you want to show or hide a pane? Do some math: Find the console and calculate the square root of 49,305. Then, assign this to a variable and multiply it by itself to :check it’s working like you would expect. :hint A simple script: Create a new R script called Week2_testScript.R that includes the code in the previous step for finding and checking the square root of 49,305 and checking it. Also ad code to the script that assigns a vector of 10 numbers to a variable called myNumbers, calculates the square root of each number, and assigns that to a new variable called mySqRoots. Once you’ve made the script, run it and make sure it goes through without errors. :hint Binomial test: My 13yo son was born in Edinburgh, but he moved to Italy when he was 1 and didn’t move back until he was 5. He has a weird US American accent, probably because he watches too much YouTube. But I was also curious about his lexicon, so I showed him a picture of this vegetable 50 times and asked him to name it. He called it a “courgette” 37 times. Use binom.test() to do a binomial test to see if his lexicon is leaning British or American - to understand how to do this, think back to the lecture. But you can also look at the docs by searching in the help tab or using ?binom.test() in the console. :note 2.3 Dealing with external data Much of what R is actually used for is taking data and doing something with that data, be that calculations, summaries, or analyses. As such, it’s incredibly important to understand how data gets into R, and how we can look at it from there. Upload a file: In the reading, you’ll have noticed Winter references “a folder where the files from this book are” (he actually tells you where to get this in the Preface). All the materilas from the book are in an OSF repository, which you can find here (OSF stands for Open Science Framework). Find the file nettle_1999_climate.csv and download it. :hint Upload the file into Posit. :hint Now that you’ve gotten this far, the next steps are all embedded in your weekly reflections; note that it will ask you to reproduce some of the code inline (in code chunks). Make sure the code in those chunks actually works. Here’s a brief description of what you’ll need to do: Read the file into a variable called nettle :hint Look at the first six rows and the last six rows of the file. What kinds of variables are in the dataset? Use the summary() function to find out a bit more about it. 2.4 Try Swirl Swirl is an interactive tool for learning R that works within R itself. In the reading I gave some context for what an R package is - Swirl is just a package that lets you learn how to use R in basic (and more advanced) ways. Swirl is a bonus here because you can use it independently; it really is meant to guide you along step by step. I probably need more hobbies, but I might even call it fun. For now, I’m only recommending the first few modules in Swirl, but if you’re wanting to practice or advance in R, you might continue to work throught Swirl on your own. While you use it, I want to add a layer for you: how do you think this works? Think about what Swirl is doing to interact with you - we’ve come a long way, but even just a couple decades ago people wouldn’t have hesitated to call this AI. I haven’t actually looked at the R code that makes Swirl work, but I’m betting it relies extensively on the kinds of logical operations Winter (2020) discusses in 1.7, Ch.1. Start Swirl: Follow the instructions in section 1.17.2 of Winter (2020) ch.1 to get started with Swirl Completing modules: The remaining tasks on the list for Swirl are modules within the program itself. It will do a good job of instructing you on how to select each one. It’s a good idea to spend some time with this, but you won’t have any reflection questions on this task, and there’s no particular point I expect you to get to. If ever you have capacity in labs - if, for example, you finish something early - plan to return to Swirl to keep learning more. Nutshells 2.4.1 Some Exercises As I commented on Perusall, if you’re keen, having Posit open to play around while you do the reading is a good idea. The Winter text shows quite a bit of code inline and you can learn by doing as you read. I don’t require this because it involves a bit of screen real estate and I want you to have some flexibility in terms of how you do the reading. Our labs might be adapted from material in these chapters, but will be slightly different. 2.4.2 Slow Open A lot of people use Posit cloud (or at the very least, it’s set up as if a lot of people might be using it). If you ever have occasion to run Posit locally, you’ll find that it can, basically, make your computer hot: it can use a lot of resources, especially if you’re doing something complex. Posit is showing through your browser by running on an instance particular to you on physical server (computer) somewhere else. When you’re not looking at it, they’re not running it - they would be losing a lot of money if they did. Companies (and some academic institutions, but not this one) often pay for Posit, which will mean dedicated server space that eliminates this opening/processing lag. 2.4.3 Check Sqrt This might seem dumb; we’re just reversing what we did. In this case, it’s a trivial check; but especially as your code or operations get more complex, you may want to use this kind of strategy to verify that R is doing what you expect it to. 2.4.4 Sqrt Hint To find what/where the console is, Google is your friend, and you can always call me over if you’re stumped. For how to get a square root in R, see section 1.2 of Winter (2020), Ch 1 (the assigned reading for this week). 2.4.5 Create Run Creating and running scripts is covered in section 1.3 of Winter (2020), Ch. 1. Creating vectors uses the c() function, covered in section 1.5 (but there are a few ways to accomplish this - check the colon function). Use strategies from the last task to add the square root function into the mix. 2.4.6 Courgette Everything about this is true except I did not show my son a picture of a courgette 50 times - he does have a weird accent, but his lexicon is definitely Scottish! He also says the word courgette very rarely because he is not a particular fan of the vegetable. 2.4.7 Find file This is a clickety part. Poke around in the files pane of the repository. Clicking on a ‘+’ will unfold a folder. The file you’re looking for is a data file. Note that you don’t want to download the File Metadata, but the file itself - this will be some extra clicks. Once you’ve found and downloaded the file, pay attention to where it downloads to. 2.4.8 Upload File Winter won’t be much help here, beacuse his instructions deal with a locally installed version of Posit (RStudio), and we’re in the cloud. In Posit, look for the files tab on the lower right pane to initiate an upload. You’ll need to know where you’ve just downloaded the file to upload it. 2.4.9 Nettle Variable Now that your file is uploaded, you’re on the same page as Winter. Look at p.17 of Winter (2020) for how to read in the file and view it. "],["scripts-troubleshooting.html", "Week 3 Scripts &amp; Troubleshooting 3.1 Using documentation 3.2 Troubleshooting Nutshells", " Week 3 Scripts &amp; Troubleshooting Aims: Get used using scripts, and start to understand tidying data, including wrangling, cleaning, and re-coding. This week in lecture we started to look at some actual experiments, and the kinds of data they generate. While the reading in Winter talked a fair bit about how we might restructure and tidy data, our lectures focused more on why you need to do that with real data. Now, you’re going to spend some time actually getting that done with real data yourself. As you go through this, remember: there is more than one way to solve these tasks. Recall last week, even with very simple problems (e.g., generate a vector of ten numbers), there were :multiple ways to approach a given task. It doesn’t matter all that much how you do it, just that you get the outcome you need and you understand how you got there. Like learning a natural language, learning a programming language is difficult - but think of this functionally. Most people don’t try to sit down and learn the entire grammar of a natural language by rote; they start by focusing on how to order a coffee and say good morning. As you become more advanced in your R skills, your code will get more tidy, and your understanding of the “grammar” of R will come, but for now, worry mainly about using your code to solve problems - efficiency will come later. 3.1 Using documentation Below, I’ve provided a list of key functions from the tidyverse that we’ll see throughout the semester, with links to their documentation. It’s a good idea to start by poking around the documentation for each function to understand a bit more about what it does and how it does it, including the kids of arguments each function expects and whether there are any relevant defaults. read_csv() filter() mutate() rowwise() group_by() &lt;a href=“https://dplyr.tidyverse.org/reference/select.html target=”_blank”&gt;select() pivot_longer() View() Note that there are also lots of R cheatsheets that you can download for reference as PDFs, or just bookmark for later. There is one for tidyr and one for the RStudio (Posit) IDE. For the RStudio one, just keep in mind that there might be minor differences since you’re using Posit online in the browser instead of locally. 3.2 Troubleshooting You’re going to make mistakes when you write code, so being able to spot them and fix them is a key skill. The nice thing about R, relative to a point and click program like Excel or Google Sheets, is that it will usually tell you when you make an error. More often than not, errors in your code will be incredibly stupid: things like misspelling a variable name, forgetting to add a pipe, or load a file. This exercise involves finding those kinds of errors and fixing them. Note that this is a domain where tidy pipes might hurt us a bit; every bit of code “piped” together is run as one, meaning we can’t run long pipes line by line to troubleshoot exactly where an error is coming from in our code. However: tidyverse will try to tell us where our pipe is broken, so pay attention to the errors it generates. 3.2.1 Using an existing script Get the files: To do this troubleshooting exercise, you’ll need to download some files from another project and upload them into your posit project. Download the files colourTidy.R, and colourData.csv from this project. Note that colourData.csv is inside a top level Data folder. Organise and Upload: You’re putting a lot of work from different weeks into this project, and it might get messy if you’re not careful. You need to organise your project so I can make sense of it when it’s submitted - when I’m marking, I’ll be looking closely at your reflections file, but also your scripts and whether you have all the right data files in the right place. Create two new folders: one called Data and one called Scripts Move your scripts from earlier weeks into the scripts folder, and the nettle.csv data file and the Week6_AJT_AEP.csv file (which we’ll work with in week 6) to your Data folder. Upload the colourTidy.R script to the scripts folder, and colourData.csv to the Data folder. 3.2.2 Fixing bugs Now it’s time to dig in and fix this script. It’s important for the purposes of your assignment, but also to get used to commenting scripts, to use comments to explain what you find while you’re debugging. In addition to this, when you’re working with a script you didn’t write, it’s always best to preserve the original script so you can check back to it to see if you accidentally introduced something you didn’t intend to. Start by creating a copy of colourTidy.R called colourTidyR_Troubleshooting.R that you’ll use to fix the bugs in the original script. You can do this by creating a new, blank script and copying and pasting everything in; but you can also select the file in the files pane and use the gear icon to make a copy of it. For each issue you find and fix, create a corresponding comment that explains the problem and how you have solved it. I’ll tell you the first few things you’re likely to encounter for free: You may not have the tidyverse package installed - because that’s what the script uses, it will immediately fail unless you do install it. As soon as you open colourTidy.R, Posit can tell and it will prompt you to install this - go ahead and do that. Note that because most every script you use will use the tidyverse, and because you want your scripts to be able to standalone, the first line of all your .R scripts going forward should be library(tidyverse) You’ve started your own way of organising scripts and files, so on the second line of the script where it tries to load the data file, it won’t be able to find it. You need to change the filepath, i.e., the argument string passed to read_csv(), so that it makes sense relative to where your script file is. That means you need to use the path to tell it to go out of the Scripts folder into the main level and then into the Data folder where you put the file. To get you started, you use “../” to get out of the folder you’re in and “up to the next level. If you’re still getting a problem with the script loading the data, look very carefully at the filename. 3.2.3 Adding comments Once you’ve fixed all the bugs and everything works, it’s time to add some comments. Comments start with a #, and represent information about the code, but the # at the start of the line lets R know that whatever comes after it shouldn’t be run. This is primarily used to explain what code does for others or your future self, but can also be used for “debugging”: you can comment out a specific line of code to find out if it’s causing a problem, or to test something without that line. See the example below: #Define x x&lt;-6+3 #Define y y&lt;-9*3 #Define z as y divided by x z&lt;-y/x #will test the square root of z later #myvar&lt;-sqrt(z) Add comments to colourTidy_troubleshooting.R throughout, indicating what each type of command is doing to the data. Note that this need not be every single line, since some lines repeat the same kind of operation Nutshells 3.2.4 Multiple Approaches For example myNumbers&lt;-c(4,2,7,9,1,4,7,3,0,1) worked as well as myNumbers&lt;-c(0:9), given the constraint of the task that we didn’t care about the values of those ten numbers. "],["tidying-visualisation.html", "Week 4 Tidying &amp; Visualisation 4.1 Tidying 4.2 Introduction to visualization Nutshells", " Week 4 Tidying &amp; Visualisation Last week, you fixed my sloppy scripting. This week, we’ll build on those skills to write your own cleaning, coding, and wrangling code, before pivoting to an introduction to visualization. Throughout, remember to keep your troubleshooting hat on: push through mistakes if you make them as you go, and remember to call me over if you get stuck, or open a discussion item on Canvas if you’re finishing the exercise after lab. Chances are I will just help you Google something - but I’m here to support you. 4.1 Tidying 4.1.1 Cleaning Start with the tidy dataframe - tidyDat - from last week. This is tidier than the raw data you started with, but there are still some imperfections. Using the tail() function (type ?tail() in the console if you’re unsure how to use this, or you can google it), look at the last few rows of the data frame. :hint To focus on this week’s work, start by creating a copy of your finished colourTidy_Troubleshooting.R called colourTidy_Week4.R in your scripts folder. Having looked at the last bit of the data frame, what needs to be done? Using the appropriate tidyr function, clean the data. You can either pipe this into the existing tidy commands, or make new ones - it’s up to you. Just make sure it does what you want it to do! Once it works, add a comment to the file to explain what you’ve done to the data and why. The other code should already be commented from last week, and you should plan to add comments to code you add to the file to show that you understand what the code is doing. I won’t include this in the instructions explicitly again, so build this in as a habit. 4.1.2 Coding For both of the tasks below, you will want to consider the str_detect() function. Start by googling this or using ?str_detect() in the console to look at the documentation. In the console, use the View() function to visually scan the values of the ArtHobbies variable. Consider whether these values are useful as-is. In the script, using the mutate() function, add a column called isArtist that makes participants responses to ArtHobbies more useful. You can do this using values like “Yes” and “No” or 1 and 0.:hint One of the main things this student was interested in about the colour terms participants provided (in the ColourName_DV column) is whether they were “simple” or “compound”. Simple colour terms are one word (like lavender), while compound ones are two or more words (like light purple or blue-green). What kinds of characters compound colour terms contain that simple ones don’t? In the script, use the mutate() function to add a column called isCompound that codes whether a term is simple or compound, again using “Yes/No” or 1/0. [:help] (#Help) 4.1.3 Wrangling In class - and in the code you just fixed in the troubleshooting section - we looked at moving things from wide to long on a pretty big scale. But wrangling can also mean creating valuable summaries. In this final step, Create a new tibble called compoundProportions that will show the proportion of compound colour terms provided for each colour (i.e., the number of compounds divided by the total) for artists and non-artists. Use group_by() to to group by isArtist and ColourHex, and the summarize() function to calculate the relevant proportion in a column called compoundProp.:hint 4.2 Introduction to visualization 4.2.1 Data visualisation Data visualisation - and visualisation in general - is a powerful tool for communication and organising both data and ideas. In general, you’re probably used to focusing on writing things in your degree. Clear and effective writing is extremely important, but sometimes, as the saying goes, a picture is worth a thousand words. The tidyverse does data visualisation using a package galled ggplot2 - gg stands for grammar of graphics. The whole concept here is that there is a generative structure to how you build graphs (not unlike generative grammar in language), and it can be additive: you can layer parts of a graph on top of each other to make very complex visualisations. There is literally an entire book on this package (probably more than one), and the shortest introductory video I could find on YouTube is 26 minutes (and it’s probably bad) - so we are not going to learn this in a day. We’ll continue working with ggplot in weeks 6 - 8 (next week, we’ll take a short break from the tidyverse and focus on survey software). To start to understand ggplot, you’ll play a bit with the same data we’ve already been using to understand how it works. Before doing that, read sections 1.1 and 1.2 of the ggplot2 book if you haven’t already (ignore the warning that says not to read it; I’ve vetted this bit). This will give you some background and help you to make sense of what you’re doing. 4.2.2 Understanding plotting code To start, you’re not quite going to be making your own plot from scratch - you’ll begin by looking at how I’ve made a plot and fiddling with my code to understand how ggplot works. Start by adding the code below to your colourTidy_Week4.R script at the bottom (copy and paste it in). Add a sensible comment just above where you paste it in. hexvals&lt;-unique(tidyDat$ColourHex) #defines an object for the plot, using data compoundProportions, setting isArtist to the x axis, and proportion of compounds to the Y axis. Use values in colourHex column to define different colours and different groups for lines myplot&lt;-ggplot(data=compoundProportions, aes(x=as.factor(isArtist),y=compoundProp, colour=ColourHex,group=ColourHex))+ geom_point()+ geom_line()+ ylab(&quot;Proportion of Compound Colour Terms&quot;)+ ylim(0,1)+ scale_x_discrete(&quot;Is Artistic?&quot;,labels=c(&quot;Not Artistic&quot;,&quot;Artistic&quot;))+ scale_colour_manual(values=hexvals,guide=F)+ theme_bw() # show the plot in the lower right pane show(myplot) # save the plot to a file ggsave(&quot;myTidyColourPlot.png&quot;, width=8, height=8) Run the whole script and see what you get (you should see a plot displayed in the ‘Plots’ tab of the lower right pane). Now, explore and figure out what each line of the ggplot call does. Comment out each line below the first line of the plotting call (myplot&lt;-ggplot(...)), and re-run (Source) the script each time. Look at the plot appearing in the Plots display, and make note of how it changes depending on what you comment out. Use this to figure out what each bit of code is doing, and add a comment above each line of the plot call to explain what that line does 4.2.3 Explore layers and geoms ggplot has lots of different kinds of geoms that you can layer on top of each other; a line geom uses data to draw a line, point geom uses data to draw points, etc. Briefly explore the different kinds of geoms here. What happens if you add geom_bar()? What happens if you add geom_boxplot()? Nutshells 4.2.4 Part85 Think about what is going on with participant 85 - there’s something wrong with their responses for colour names. 4.2.5 Help If you feel like this is impossible and you want to run into the woods, a) this is a very normal feeling, but b) remember that the alternative is manually scanning 1360 rows in a spreadsheet (and that many useful datasets are much larger than this). If you need help, just call me over, or open a discussion item on Canvas if you’re working on this later. 4.2.6 Proportion If you’ve coded isCompound as ones and zeroes already, the proportion is just the mean of these zeros and ones. Use the mean() function to calculate this. If you didn’t code isCompound as ones and zeroes, think about how to go back and do that. 4.2.7 No means no Remeber that everything in R is case sensitive. This means that “no” and “No” are not the same thing from the computer’s perspective. "],["creating-surveys.html", "Week 5 Creating surveys 5.1 What is a survey? 5.2 Creating a survey 5.3 Logic and validation 5.4 Moving it to your assignment Nutshells", " Week 5 Creating surveys 5.1 What is a survey? The word “survey” contains multitudes; in many fields, this is a very specific method for gathering data involving particular kinds of questions. However, for our purposes, think of this as a specific kind of tool: a survey is a way to create a computer-based series of questions that you can send to participants. You might think this is very straightforward; just make up some questions and throw them in. But it is rarely this simple: you have to think carefully about how the way you ask questions can constrain participants’ answers, what kind of answer you really want from them (e.g., a word? a choice? 1-2 choices? a number?), and whether some questions are only relevant for some participants. In short, a survey is more complicated than just a list of questions. If an acceptability judgement task makes up a big part of your second assignment, you’ll get up close and personal with these kinds of details as you design your own study. This exercise will focus on a software that allows you to create surveys that can be distributed online. There are a lot of options in this space, but many of them cost a lot of money, and/or the software provider can see or keep the data you collect from your participants. 5.2 Creating a survey This week, you’ll spend most of your time outside of Posit and in a tool called Survey.js instead. Under the hood, this is actually in a completely different programming language, JavaScript. However, don’t panic: you aren’t actually going to learn to write JavaScript, Survey.js provides a point and click interface that writes it for you. Go to surveyjs.io and create an account. Once you’ve done this, go to the My Surveys area of your account and click ‘Create a Survey’ Now you can use their little editor in the browser to make quite a complex survey. We’ll work through this step by step, but you have to make some decisions about the topic of your survey. Before you start, take a minute to think about something it would be interesting to look at in terms of acceptability and dialect. Think of something that may be standard in your own dialect (and maybe some related ones), but might be considered unacceptable by speakers of other varieties. :hint Use the menu on the left to add a question - start with a Radio Button Group that obtains informed consent from your participant. This should be on it’s own on the first page; the rest of the questions below should be on Page 2. Make sure to give each page a reasonable name/description (it’s not very polished for your participants to see “Page 2”) Give the survey a title and a description; just make it something about language, e.g., “Acceptability study” Add a Single-Select matrix question that gives the participant at least two sentences related to the phenomenon in your own dialect. The sentences should be in the rows, and there should be five columns labeled “acceptable”, “okay”, “unsure”, “odd”, and “unacceptable”. Using the Yes/No (Boolean) question type, create a separate categorical acceptability item for each sentence or item. Using the Dropdown question type, create a question that asks for the participants’ age. You don’t want an exact number so create relevant ranges. Create a Radio Button Group that asks where the person is from using a few relevant regions or areas, including where you/your dialect are from (e.g., this might be cities, or much larger regions like England, Scotland, etc.). Remember to include an “Other” option. Create a Single Line Input item so that participants not listed in your existing list of regions can say where they’re from. Create another Single Line Input item for participants who select the area where you/your dialect are from asking how long they have lived there. Now you should have a neat little survey. Use the “Preview” button to see how it looks for participants. Make sure everything looks like you want, there’s no typos or unclear instructions, and the questions appear in a reasonable order. 5.3 Logic and validation This looks great already, but there are some problems: The participant can choose what to answer and what not to answer; we need to make most of the questions required. If the participant selects ‘No’ in the consent question, they can still do the survey. We don’t really want someone who chooses a specific region to answer the open-ended question about where they are from. We don’t really want the question about how long people have lived in the relevant region to appear unless they answer that they are from that region. We need to fix these by changing the settings so that certain questions are only visible if you’ve responded in a particular way to a previous question. This is called branching logic. Make everything but the two single line text questions required using the “required” button on each. Go through each question and give it a transparent Question name in the settings (on the right side) under the General menu (e.g., “consent”, “Age”, etc.). This will make it much easier to find as you add validation and logic in the next few steps. Likewise, under ‘Choice options’ (for all but the single line text questions), make sure the value of the choice matches the display text (note that for the Single-Select Matrix question, this will be under ‘Columns’ and ‘Rows’) Under the settings on the right side for the consent question, scroll down to Validation and click ‘Add Rule’. Under error message, add “You must consent to participate. If you don’t want to, simply close the window now. No data has been collected.” Click the little magic wand next to ‘Validation Expression’, in the window that pops up, under ‘select question’, select the consent question from the dropdown menu and set it to ‘Equals’ Yes. Now test that this worked: If you preview your survey and select “No” and try to go to the second page, it should show you an error. Now, you want to make the single line text questions only visible for the relevant people. In the settings for the open-ended question about where a participant is from, scroll to the Conditions section. Use the magic wand next to ‘Make the question visible if’ to select the region question, select Equals and ‘other’. In the settings for the open-ended question about how long someone has lived in the target region, go to the conditions section and click the magic wand. Do the same as for the previous question, only tie it where the selection equals the relevant region. Before you move on, use the preview button to stress test your changes. Make sure the relevant questions are required, you can’t proceed unless you can consent, and that the open-text questions only appear if the specific selections are made in previous questions. 5.4 Moving it to your assignment We don’t quite have time to really get your little survey online - that involves an extra step or two, including getting a persistent URL you could actually send to participants, and storing responses in a database. However, it’s worth noting that for your third year project, if a survey is involved, building it in Survey.js will get you a long way: you can build it yourself and share it with your supervisor to polish and refine it using everything you’ve learned today (after that, you would just get in touch with me to get it online and start collecting data). For today, you’ll just get your proof-of-concept survey into your R project as part of your assignment portfolio. There’s already a folder called Week5_SurveyDemo. This just has one file inside it: index.html. Open index.html in Posit to prepare to get your survey data into it from Surveys.js. You want to leave this file as-is, except you want to replace the part on line 21 that says /*PASTE JSON FROM SURVEY JS HERE*/ with your custom JSON. Go to the JSON Editor tab in Surveys.js. If you look closely at what’s here, it’s all the information about your questions in a specific format called JSON (which stands for JavaScript Object Notation). However, don’t worry much about reading through this; the point of the Design tool is that you don’t have to write (or read) JSON. Select all the JSON here and copy it to the clipboard. Go back to the index.html file and paste it all in after the const surveyJSON =, replacing the /*PASTE JSON FROM SURVEY JS HERE*/ text with your custom JSON. Save the index.html file. Now, in the files pane, click on the index.html file and select ‘View in a web browser’. This should open your survey in a new tab, where it will look and work much like it did in the Survey.js design tool. Nutshells 5.4.1 Var Type This can be lexical, syntactic, or even potentially semantic/pragmatic - but note that you’re creating a written task, so a focus on sound or pronunciation could be tricky (it’s not impossible! But harder to do as a quick example to learn the software). "],["acceptability-judgement-data.html", "Week 6 Acceptability Judgement Data 6.1 Load the data 6.2 Visualising trends 6.3 Plotting means and standard error Nutshells", " Week 6 Acceptability Judgement Data This week we’ll be dealing with some data from the reading, which includes large scale study on the alternative embedded passive. In short, the work addresses why some verbs can be used like need in (2) or (3) below (at least sometimes in some varieties), while others can only have embedded passives like in (1). The car needs to be washed The car needs washed The car needs washing Dan Duncan has kindly shared data with us from the paper from UK respondents for some verbs. The whole dataset would be too large for us to deal with in Posit Cloud, but this subset of the data is still 9,000 rows. You wouldn’t want to deal with this data manually. I assume you have done the reading before attempting this exercise, since doing specific things in a specific order is sort of the point of everything we’re doing here. Whether you have or not, you might want to pull up the paper in a tab next to the exercise to allow you to make some comparisons between the graphs you make here and what Duncan (2024) shows in the paper itself. Because much of the point of Duncan (2024) is that there isn’t yet a complete description of AEP in the literature, a lot of his findings are more to do with exploring the set of acceptabliity judgements he collects than doing very targeted hypothesis testing. However, he does outline some specific ideas about how particular independent variables will affect his key dependent variable of (A)EP acceptability: Semantic likeness category: The category of a verb will determine how acceptable people find it in the AEP. In other words, some categories will have higher rates of acceptability than others, and the acceptability of verbs within a category will cluster together. Syntactic type: Raising verbs will have the highest acceptability ratings for AEP, followed by ECM; Control will have the lowest. Productivity: Verbs that generally have higher productivity in the embedded passive will have higher acceptability ratings. Region: AEP will generally be more acceptable for speakers of Scottish/Northern Irish English than for speakers from Wales/England (Duncan, 2024 doesn’t specifically focus on this, instead focusing on potential similarities/differences in US/UK Englishes; however, he points to a lot of earlier literature that does find this this, so we should also find it in the data). 6.1 Load the data Create a new script called Week6_AEP.R and save this into your scripts folder. Make sure you’ve loaded the tidyverse library at the top of the script. The data file should be in your data folder, where you moved it in the week 3 exercise. Load this into a variable for use in your analyses. Use View() and summarize() to understand what the data looks like, e.g., what are each of the columns and what do they mean? 6.2 Visualising trends Using the basic plotting templates below, add the missing variables so that each creates a reasonable plot. You need to define the x axis for the first two plots, and the y axis for the third plot. For each plot, give it a and a transparent label for each axis using xlab and ylab, a reasonable title using ggtitle for and the plot overall. Once you’ve made just one of these, you’ll see that the legend for the colour isn’t quite ideal. Looking at the documentation for scale_colour_manual(), think about how you can fix this so that the legend reads England/Wales and Scotland/Northern Ireland :hint This will give you one plot for each of the linguistic variables listed above (semantic likeness category, syntactic type, and productivity). vproductivity&lt;-ggplot(data=dfname, aes(x=, y=AJTResponse, colour=Region))+ geom_point()+ #make productivity log scale as in the original paperß scale_x_log10()+ ggtitle()+ xlab()+ ylab()+ theme_bw() # save the plot to a file ggsave(&quot;vproductivityPlot.png&quot;, width=10, height=8) syntype&lt;-ggplot(data=dfname, aes(x=,y=AJTResponse, colour=Region))+ geom_violin()+ ggtitle()+ xlab()+ ylab()+ theme_bw() # save the plot to a file ggsave(&quot;syntypePlot.png&quot;, width=10, height=8) slcat&lt;-ggplot(data=dfname,aes(x=AJTResponse,y=,colour=Region))+ geom_violin()+ ggtitle()+ xlab()+ ylab()+ theme_bw() # save the plot to a file ggsave(&quot;slcatPlot.png&quot;, width=10, height=8) Part of your reflections will involve making some comparisons between these plots, so keep them handy! 6.3 Plotting means and standard error The plots we’ve made above show some useful distributions, but they don’t quite look like most of what is in the original paper. This is because this requires calculating means and standard errors for particular groupings; specifically, the mean and SE of ratings for different syntactic types and semantic likeness groups buy region (Figures 4 and 5 in Duncan, 2024). To calculate standard error, we’ll use the std.error() function from the plotrix package. Install this package using the packages tab in the lower right pane, or type install.packages(\"plotrix\") in the console. Alternativley, adding library(plotrix) to the begining of your script and saving it will prompt you to install the package. In your script, create a new tibble that will use group_by() to group the data by Region and SyntacticType, and summarise() to give a table of the mean() of AJTResponse and the std.error() of AJTResponse for the relevant groups. Using the same strategy as above, create another tibble and do the same for semantic likeness categories (grouping by this variable instead of syntactic type). For each new tibble, check this has given you what you would expect by using the View() function. Now, our aim will be to recreate Figures 4 and 5 from Duncan (2025), only contrasting regions within the UK rather than countries. Use the template below to make two separate plots in your script. Note: You’ll need to change the name of the plot for each one, one for syntactic type and one for semantic likeness categories. The x aesthetic should be whatever you called your meaned AJTResponse when you used mutate to add a new column. The y aesthetic should be the relevant categorical variable for each plot (syntactic type and semantic likeness category) Make sure to add reasonable labels to the X and Y axes; you can borrow these from Duncan (2024) Figures 4-5. You may also want to use scale_colour_manual() to add reasonable legend labels for the regions. In geom_errorbar(), you need to define the maximum as the mean plus the standard error, and the minimum as the mean minus the standard error. Use scale_colour_manual() and labels=c() to give the legend labels more readable values. In the ggsave() call, which saves the plot to an image file, you need to give each plot a unique filename. response_means&lt;-ggplot(data=newtibble1, aes(x=, y=, colour=Region))+ geom_point()+ geom_errorbar(aes(xmax=,xmin=), width=0.25)+ xlab()+ ylab()+ theme_bw() # save the plot to a file ggsave(&quot;namethisplot.png&quot;, width=10, height=8) Now, you’ll use these plots in completing your reflections. Nutshells 6.3.1 Scales Use the labels=c() argument to change labels; c() is just a vector that needs two strings to match the two existing levels of Region. You also need to specify values=c() to change colours (these can be hex values or colour names); it forces you to do this when you are altering the colour scale manually. "],["lexical-decision-data.html", "Week 7 Lexical Decision Data 7.1 Get the data 7.2 Load and understand the data 7.3 Make a plot Nutshells", " Week 7 Lexical Decision Data This week we’ll look at data from the lexical decision task that was the focus of the reading. Next week we’ll look at ALL data before embarking on a much needed break. As we start to get more and more into looking at data from specific methods, think about what kind of study you’re more interested in designing for your final assignment: are you more drawn to the kinds of questions we might want to address using LDT or another kind of decision task (questions about processing and properties of words or phrases), or, do you think you might have questions that are more suited to ALL (questions about learning, cognitive biases, and potentially cultural processes like iteration)? Keep in mind that you can design a study that includes more than one method. Hudson-Kam and Newport (2005), a well-known ALL study which we’ll go over in more detail next week, for example, uses ALL alongside acceptability judgments. We’ll also look at ways we might combine ALL and decision tasks - I’ll leave it to you to imagine how you might effectively combine AJT and LDT, but this shouldn’t feel like a stretch. This exercise will use data from the reading for this week, Sidhu, Pexman &amp; Vigliocco (2019): Effects of Iconicity in Lexical Decision. We will deal with their data from Experiment 1 only. 7.1 Get the data SPV (2019) provide their data in an Open Science Framework repository, much like the Nettle data from week 2. Go to OSF and use search to find the relevant project Download the data from Experiment 1 (Exp1.csv) and their analysis file, Effects of Iconicity in Lexical Decision Analyses.Rmd. [:hint] Remember that downloading an actual file requires a few clicks and isn’t the same as the metadata for the file, even though the interface makes this easier to download. For most of this walkthrough, you’ll mainly use the data file; but you will need look at and reference their analysis script in your reflections. Upload the data file to your project in the data folder, and their analysis file at the top level. Create a new R script in your scripts folder called LexicalDecision_Week7.R 7.2 Load and understand the data Make sure your script loads the tidyverse using library(tidyverse) at the top, and read the data file into a tibble. Source the script to run it and then use the View() command in the console to eyeball the data and make sure it’s loaded correctly. Use the summary() command in the console to take a closer look at the variables in the data. What are the variables and what are their types? Does anything jump out that isn’t quite right? While there are 240 trials per participant here, only some of them aren’t really relevant; we don’t really care about the non-word trials; these were used to force a decision. SVP also removed some other trials from the data for other reasons (see Sidhu, Pexman &amp; Vigliocco, 2019, p.170, end of section 2.2.1). Use filter() to create a new tibble of only the trials that are relevant for analysis; don’t worry about the constraint regarding removal of trials were a participant’s RT was a certain distance from their own mean. 7.3 Make a plot Examine Figure 1 in the paper. It shows RTs on the y axis and Iconicity on the x axis, with a separate line for each block in the experiment. Use the skeletal ggplot code below (copying it into your script) to recreate a version of figure 1 from SVP. You can jazz it up and use different colours if you wish - I love this tool for finding colour palettes&lt;/&gt; (tap the spacebar to generate a new palette). Note that even if you coloured the lines precisely as in the paper, it won’t be exactly the same - you’ll address why this is in your reflections. #replace the tibblename, x and y varnames to align with what is in your tibble lexplot&lt;-ggplot(data=tibbleNameHere, aes(x=xvarhere, y=yvarhere))+ geom_smooth(aes(colour=as.factor(Quarter), method=&#39;lm&#39;,se=FALSE))+ xlab()+ ylab()+ scale_colour_manual(name=&quot;Trail Block&quot;,labels=c(),values=c())+ theme_bw() # show the plot in the lower right pane show(lexplot) # save the plot to a file ggsave(&quot;myLexIconicityPlot.png&quot;, width=8, height=8) Nutshells 7.3.1 Find OSF You’ll notice that for the first time, I haven’t given you a link to an R project or the OSF repository directly. That’s because I want you to start to think about doing these things more independently - if you’d come across this paper on your own, how would you look for the data on your own? Remember when you do find the data (as we’ve seen a few times), the data files are a few clicks in (don’t be fooled by the metadata download). "],["artificial-language-learning-data.html", "Week 8 Artificial Language Learning Data 8.1 Get the data 8.2 Clean the data 8.3 Calculating edit distances 8.4 Summarise and plot Nutshells", " Week 8 Artificial Language Learning Data This week we’ll look at data from the experiment we demoed in class, where we did a Stroop task and a very short artificial language learning (ALL) task. We’ll only be looking at the ALL data. 8.1 Get the data Unlike some of the published data we’ve dealt with in the module, this data is from a student project (like the colour data from weeks 3-4). However, note that the informed consent for both of these studies clearly stated that data would be used for teaching and research purposes. Download the ALL_Responses.csv file from this R Project and upload it into your own data folder. Create a new script in your scripts folder called ALL_Week8.R Read the data file into a tibble. Source the script and then use the View() commannd in the console to eyeball the data and make sure it’s loaded correctly. Use the summary() command in the console to take a closer look at the variables in the data. Returning to the full view of the data on the top left pane, scan down the ProducedLabel column in particular. What’s wrong here? :solution 8.2 Clean the data We don’t want responses where the participant entered “?”. Use filter()to create a copy of the raw data tibble and remove remove these responses. Note that this will work for our purposes in this exercise, but it’s a bit too simple for a real approach to analysis. Ideally, we’d take the time here to make more principled decisions about what to remove and why. What the student actually did was to allow participants to provide “?” for up to two responses and then just remove those responses, but if a participant provided more than three question marks for either test block, this was taken as an indication that the participant wasn’t paying attention to the task and we removed all of their data. For now, in the interest of moving on - and because we’re not calculating any by participant measures - we’ll use a quick filter only on the ProducedLabel. However, note that this was an illustrative moment for considering how to design a task that gets you valuable data: if I were to do this again, I would make it so that the participants could only enter alphabetic characters (and not punctuation) for labels. 8.3 Calculating edit distances The next thing we want to do is calculate edit distances between the label the participant was trained on (TargetLabel) and the label they provided at test (ProducedLabel). We walked through how this is done in class, but we’re not doing it manually: there’s a package for that. In the console, type install.packages(stringdist). Once that’s done, you need to add library(stringdist) to the top of your script (below your standard library(tidyverse)). You only need to install it once, but you want to make sure the script loads it every time it runs. Use ?stringdist() in the console to understand a bit about how the function works. What different methods are there? Which do yo think we want? :answer Using a pipe, add line that forces the data rowwise() so you can iterate over each row to find the difference between the target and produced labels. Now, pipe in another line which uses mutate() to add a column called LevDist that calculates the distance between the TargetLabel and the ProducedLabel 8.3.1 Normalising distances Levenshtein distance is a count of the number of insertions, substutitions, or deletions needed to change one string into another, but these can’t capture some relationships (e.g., as we discussed in lecture, nid and rux are 3 changes apart and so are nidofrex and nitefrix, but the latter pair is obviously closer than the former). To do this we need to normalize by the length of the longer string between the TargetLabel and ProducedLabel Use str_length() and mutate() to pipe in code which adds a column MaxLen with the length of the longer string by calling the max() function. You can use a new pipe/line and mutate() call, or you can add this to the existing mutate call. :hint Now you want to divide the LevDist in each row by MaxLen. Pipe in a new mutate() call that adds a column called NormDist defined as LevDist/MaxLen. Note that this has to be piped in as another mutate() statement and can’t be merged with the earlier one :Why not? Check your new variable: because NormDist is a normalised variable, all values should be between 0 and 1. Use the summary() function in the console to verify this. 8.4 Summarise and plot Now you want to make a summary of mean edit distances - your dependent variable - in terms of some independent variables (TestBlock and Condition), so that you can look at these graphically and see if anything interesting is going on. Specifically, the participants did two blocks of testing: one after only seeing the form-meaning mappings once (TestBlock value A), and another after having seen the form-meaning mappings twice, as well as having undergone a round of testing which included feedback (TestBlock value B). What do you expect to happen to the distances between blocks and what does this mean? Pipe in an ungroup() statement. This is currently grouped rowwise(), but we want to calculate the mean grouping it by TestBlock and Condition, so we have to ungroup it first. Pipe in a group_by() statement that groups the data by TestBlock and Condition, and a summarise() statement that defines a variable called MeanDist as the mean of the NormDist column across those groups, and seDist as the standard error of this mean :hint Copy the skeletal plotting code below to your script and modify it to create a plot with mean distance on the y axis, test block on the x axis, and different colours for each condition. Remember: Use reasonable axis labels and a title. ylim() should reflect the actual range of possible distances, not just what occurs in the data. add geom_line() so that the slope of the difference between block A and B is visible #colour and group should be the same allPlot&lt;-ggplot(data=, aes(x=,y=,colour=, group=))+ geom_point()+ #add se bars - check week 6 for how this works geom_errorbar(aes(ymin=,ymax=), width=0.02)+ ylim()+ xlab()+ ylab()+ ggtitle()+ theme_bw() ggsave(&quot;ALL_Plot.png&quot;, width=10, height=8) Nutshells 8.4.1 Wrong Label A bunch of participants, mostly for some but not all trials have entered “?” instead of a string that resembles something they saw in their training (like we wanted them to). These aren’t going to be useful to us in calculating any kind of distance measures, because all the distances will just be the length of the longer target string. In other words, to change “?” into any of the target labels, you’d have to change one character and insert all of the others. It could be sort of useful to know that they got it wrong, but mostly it’s just not what we were looking for them to do - were they were unsure, we wanted a genuine guess. 8.4.2 What Method The stringdist package has lots of options, including hamming distance and a few kinds of Levenstein Distance. We don’t want hamming distance, because our strings are often of different lengths. We’ll just use plain Levenstein Distance, but note there are lots of options. To do this, we’ll use method=\"lv\" when we call the stringdist function. 8.4.3 New Functions We’re firing in fast here with some new functions! This isn’t just because we’re speeding up as you become more familiar with R, but also to start to understand that there are a lot of existing functions and packages that do things for you - you just have to look into it. For example, if you google “edit distance package R”, the strindist package comes up right away. For these two new functions, use ?str_length() and ?max() in the console to understand how to use each function. These are built-in and pretty straightfoward: ?str_length() you feed it a string and it returns the length. For max(), you give this a vector of numbers and it returns the one with the highest value. 8.4.4 Why New Mutate The first mutate statement only uses columns that already exist (TargetLabel and ProducedLabel) to create two new ones. The mutate() statement that creates NormDist uses LevDist and MaxLen, which don’t exist until the previous mutate() statement is completed. 8.4.5 Standard Error This is similar to what we did for syntactic type and semantic likeness categories in week 6, so look back to that for a strategy. Remember you will need the plotrix package for the std.error() function. "],["submitting-your-assignment.html", "Week 9 Submitting your assignment", " Week 9 Submitting your assignment Once you’ve completed the week 1-8 exercises, and double checked your reflections document and task checklist, it’s time to submit your work. You won’t submit this as a document like you would most assignments; you will download and submit your entire R Project as a zip file so that I can see your reflections and scripts you’ve written and plots you have made in your own organised little project. To do this: You’ve done your reflections in your .Rmd file, but this is designed to be “knit” into a more readable (but not editable) PDF file. This PDF file is the version of your reflections I will mark, so make sure you are completely happy with your reflections before you knit them to a PDF. At the very top of your assignment_reflections.Rmd file, there’s some info about the file between two sets of three dashes, e.g., title, author, etc. After author where it says \"[STUDENT NUMBER HERE]\", enter your student number between the double quotes. There’s a little button at the top of the tab that says “Knit” - click the little arrow next to this and select ‘Knit to PDF’. This should cause some action in the console for a few seconds, and eventually generate a PDF with your student number and the date at the top, as well as a handy table of contents. For boring regulatory reasons, you also need to complete a standard school coversheet for the assignment in Word. Enter your student number at the bottom, save it, and upload it into your Posit assignment project. HELP IT WON’T KNIT!! This is probably because you have a code chunk that’s using variables you’ve modified or overwritten and so it won’t run properly. Here’s what to do: When it fails to knit, it will show you an error referring to a code chunk on a specific line(s) in the console. Switch the view of your reflections from Visual to Source to see the line numbers and find the problematic code chunk. At the top of the chunk, where it says {r}, before the closing curly bracket, add eval=FALSE, so that the top line of the chunk reads {r eval=FALSE}. This will mean it ignores that code chunk when compiling. Note that because there may be a few problematic code chunks, you may need to do this a few times. Once everything is ready, go to the files pane and select all the files and folders on the top level (e.g., .Rhistory, project.Rproj, your reflections documents (the .Rmd and .pdf), your coversheet, the Week5_SurveyDemo, your Scripts and Data folders, and any other files or folders that are part of your project). Selecting a folder automatically selects all of the files inside it, so you don’t need to dig below the top level. Make sure you have everything selected - part of what you will be marked on (in addition to your reflections) is evidence in this bundle of files that you have actually worked your way through the relevant exercises each week. Once everything is selected, go to the gear icon and click ‘Export’. This will make a window pop up where you choose a name for a file ending in .zip. Make sure to keep the .zip file extension, and name your file [STUDENTNUMBER]-SEL2229-Assignment1.zip (replacing STUDENTNUMBER with your unique student number). Once it’s appropriately named, download this file by clicking ‘Download’. Go into the submission area for the assignment in Canvas, and submit the entire zip file by uploading it. "],["preparing-your-final-assignment.html", "Week 10 Preparing your final assignment 10.1 Starting with a skeleton 10.2 Referencing", " Week 10 Preparing your final assignment You’ve spent a lot of time this semester learning how to use R in Posit. What you might not have clocked is that much of this time was actually spent writing in RMarkdown in order to complete your reflections. Whatever you use to write your final assignment, there are two things that you need to do: Use headers and subheaders to structure your document to have (at minimum) the specific sections we’ve discussed throughout the module. Use reference management so that you are not manually doing your references. Arguably, you should be doing both of these things with each and every one of your assignments going forward in your degree, but know that I’m looking out for it especially in this one. To understand why and what each of these things means, refer back to this week’s lecture. In today’s lab, you’ll work through the following task: Creating a template for your final assignment (or, if you already have a document going for this, double checking the structure and using styling properly) Using structural views and tables of contents to “jump around” your document and facilitate your writing Using Zotero for reference management and either using this to generate a .bib file for use with RMarkdown, or Using the Zotero Plugin for word or google docs. As the last task indicates, these tasks can be completed either in RMarkdown or Word/Google Docs. 10.1 Starting with a skeleton As we discussed in lecture, the non-linear nature of actually writing means that it’s really important to start with some linear structure to build in some coherence. Think of this as a literal skeleton: if we didn’t have bones inside our bodies, we would melt into a disgusting flesh pile that was difficult to make sense of. If you don’t start with some kind of skeletal structure in a document, you risk ending up with a sort of puddle of paragraphs that may have felt great to write, but hits the reader like a wet bag of organs. It’s not that this has to be set in stone - skeletons change! A infant’s skeleton is very different from an adult - but it gives you a narrative structure to start with and build on. For this assignment, I have already given you a skeleton - we’ve discussed it quite a few times! Look back at the lecture, particularly slide 44. However, keep in mind that you should try to make this kind of skeleton for yourself in your own work in future! Often times, your module leader will provide some guidance on what that might look like, but as your work becomes more independent (i.e., your dissertation), you should expect to build this kind of skeleton yourself. If you don’t already have a document going for your assignment, open a new project in Posit and then a new document :in RMarkdown, or open Word/Google Docs to get started. If you do already have a file going, pull this up…either way, have slide 44 to hand for your strucutre. If you’re opening a new RMarkdown document, it will ask you to install packages (yes), and what you want your default output to be (PDF). In the console, run install.packages(tinytex) and then tinytex::install_tinytex(force = TRUE). If it wants you to restart R, just go ahead and do this. Put the structure into your document using title and header styles, and include any potentially relevant subsections for your specific proposal. If you’re not sure how to use styles, just call me over and I’ll explain or demo up front. Learn how to use the structure to navigate around your document as needed: In Word, go to View&gt;Sidebar&gt;Navigation. This will add a sidebar that provides links to each styled header of your document, and also allows you to see the structure of the document. In Google Docs, there’s three little dots on the upper left of your document (under the style/toolbar) that will show this. In RMarkdown in Posit, using Visual mode, there’s an “Outline” button on the right that will show a clickable outline for you to move around the document. 10.2 Referencing 10.2.1 Using zotero and .bib files Zotero is reference management software. It is a tool designed to manage the vast (and growing!) literature relavant to your studies so that you can focus on understanding and using that literature to support your own :critical thinking. You will need to invest a bit of time in learning how to use reference management software, but it will give you a lot more capacity to do the parts of your assignment that you actually should be marked on. I say what you should be marked on because we are looking for content, but often we can’t get to that if your sourcing and referencing are a mess; it makes it difficult to tell what ideas are actually yours. Referencing correctly does not ensure a good mark, but referencing incorrectly is very likely to :get in the way of one. You should adhere to the https://lead-ncl.gitbook.io/language-and-linguistics-style-guide/ when writing, and in terms of the style of your references and citations specifically, the Harvard Style is a good match for what we expect in your written work here in SELLL. This will become important when using reference management software because instead of you learning the Harvard Style, you choose the style from a menu and the software implements it for you, right down to italics and punctuation in the reference list. If you were taking an outside module in Journalism and they wanted Chicago style, you wouldn’t need to learn that either; the software knows it, and you just tell it to use that style instead. The tasks below will get a basic Zotero set up going, but note that it isn’t the only game in town. Word has its own citation management built in (but it’s not that useful - you have to type in the parameters of each reference manually), and the university provides some support for EndNote, for example. However, I prefer Zotero because it’s free and open source and works very well. Sign up for Zotero: Go to zotero.org and get a Zotero account. Keep the tab with your Zotero account open. In a new tab, find some literature and add it to your library - head to Google scholar and put in some search terms related to the experiment you plan to propose. Specifically, find the DOI (which stands fordigital object identifier) for the source, it will look something like https://doi.org/10.1057/s41599-019-0299-5. Copy this to your clipboard. Back in your Zotero tab, in the top menu bar there’s a magic wand icon. Click this and enter the DOI to add the source. You can also add a plugin button to your browser that will allow you to add a source with a single click or tap. Note: You can use Zotero entirely in the browser, but it’s a much more fully functional tool if you get the desktop app. This allows you to connect it to actual PDFs on your computer and take notes inside PDF documents - Zotero is one of the best PDF note-taking tools I’ve ever used. Once you have a couple of sources added, select all the sources (use ctrl+A) and click the icon on the top ribbon that looks like a stack of books. What happens? Can you change the reference style to APA? You can also use Zotero to take notes and make connections between sources using tags. Select a source and explore the pane on the right side of your library. 10.2.2 Reference as you write We saw in the last step that you can generate a reference list directly from your library in any style you want, and then copy and paste that into a document. This would already save you a lot of time over doing this by hand, but assumes you’ve kept everything you referenced in a particular assignment folder, or properly tagged or separated from other literature, so that you don’t generate a reference list that’s missing something you referenced, or includes something you didn’t. It’s not uncommon to read a lot of literature (or at least collect it) that doesn’t end up being cited in your assignment, so this can be tough. There’s a better way, but here is where word processors like Word and Google Docs diverge with RMarkdown, so follow your preferred path below. 10.2.2.1 Word Processor Integration Read up on how to use and install the Zotero plugin for your preferred word processor. Once you have it installed, In your assignment template, add a few parenthetical references inline. What happens when you add the first reference? Use the add/edit bibliography button to add a list of references. (Bonus points if it bothers you that it says bibliography but is actually adding references) Try to edit one of your parenthetical references to only include the year so you can :refer to the authors in the sentence. What happens? Why do you think this is? Note that as you add references inline, they won’t automatically appear in your list of references - “refresh” to regenerate the list of references after you’ve made changes inline. #### RMarkdown integration Now that your Zotero library has a few references, you can use this to create a .json file which is the standard format for referencing in RMarkdown. Select all the items in your library you want (use ctrl+A to select them all, and find the export button and select export to BibTex (if you’re stuck here just call me over). Download the file to your machine (the default will be the downloads folder). Go back to Posit and upload the file, which should have a .bib extension, to the top level of your project where your markdown file is; it will probably be called something like export-data.bib. Open it up in the files pane to have a look. The .bib file is a series of “entries”, one for each source in the library. The part of each entry after the first curly bracket is called the cite key, it’s what you use to cite the work; below it would be @prasada2013conceptual. Zotero generally generates something like author_Year_Firstwordoftitle, but if you have something specific you prefer, you can edit this in Zotero itself (online or desktop) or directly in the bib file. Cite keys cannot contain spaces or special characters. The rest of the entry has all the information necessary to generate a full reference in any style: @article{prasada2013conceptual, title={Conceptual distinctions amongst generics}, author={Prasada, Sandeep and Khemlani, Sangeet and Leslie, Sarah-Jane and Glucksberg, Sam}, journal={Cognition}, volume={126}, number={3}, pages={405--422}, year={2013}, publisher={Elsevier} } Now you can use the cite key to cite the work in your RMarkdown. But first, you have to tell your .Rmd file where to find it. The top of your file will look something like this: --- title: &quot;Lexical processing and lexical frequency&quot; author: &quot;StudentNo&quot; date: &quot;`r Sys.Date()`&quot; output: pdf_document: default html_document: df_print: paged --- You need to add another argument to this so that it knows where to find your references: --- title: &quot;Lexical processing and lexical frequency&quot; author: &quot;StudentNo&quot; date: &quot;`r Sys.Date()`&quot; output: pdf_document: default html_document: df_print: paged bibliography: &quot;export-data.bib&quot; #add this at the end --- Now you can use your bib file. Go to your rationale and write a couple quick sentences about some sources; it’s okay if this is boring and vague (though the writing for your assignment generally should not be - this is just a quick exercise). Add the cite key in square brackets where ever you’d want the inline citation to appear, e.g., mine would look something like: “Heseen and colleagues have found that chimpanzees use gestures at different frequencies, in distributions that mirror lexical frequences in human language [@heesen_linguistic_2019].” Using square brackets adds it in (Author, Year) format, but there are other ways to get your citations in so they fit well with your writing, including adding page numbers and putting the author name outside the parenthesis. See here for a more detailed guide. Now the knitting process will detect your citations and build a reference list accordingly. To get it to do this, add a top level header at the bottom of your document called “References” (i.e., put # References on the last line) Now, it’s time to knit and see what this does! What happens under references? Which references has it listed and why? "],["nutshells-8.html", "Week 11 Nutshells", " Week 11 Nutshells 11.0.1 Markdown generally RMarkdown is specifically designed to work within R and RStudio, but in general isn’t very different from Markdown more generally, which uses the same characters for formatting in almost all cases (# for headers, * for emphasis, etc.). Markdown is just a way of text formatting that allows you to keep your hands on the keyboard, which makes a big difference when you’re a fast typer (not moving to the mouse to manually select styling means you don’t need to interrupt your writing constantly). 11.0.2 Open Document Open a new file and instead of choosing a .R script, choose an RMarkdown file - do make sure to choose RMarkdown and not just a plain markdown file. 11.0.3 Low Mark If you’re not already familiar with our marking scheme in SELLL, take a good look: you’ll find that anything above 60 entails “competence in academic style”, while the lower bands specifically identify “uneven command of academic style”. Correct referencing is a basic part of competence in academic style. When it comes to marking, if your work screams that you’ve chosen to do something by hand that a computer can do better (and that we’ve specifically covered in this module), it will hold your mark down. 11.0.4 Year Only What do I mean by this? The most basic way to cite is to tuck something at the end of a phrase, e.g., “Cross-modality and synaesthesia have been linked to language evolution (Cuskley and Kirby, 2013)”. But often, writing is more fluid and effective if you refer to the authors within the sentence, e.g., “Cuskley and Kirby (2013) argue that cross-modality and synaesthesia are linked to language evolution.” Try this latter strategy with Zotero and see what happens. "]]
